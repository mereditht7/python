class Node: 
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def addtofront(self, data):
        new_node = Node (data)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head= new_node
        

    def insert_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        
        current = self.head
        while current.next: 
            current = current.next
        current.next = new_node

        new_node.prev = current
        print("added item to linked list")

    def print_list(self):
        current = self.head

        while(current):
            print(current.data, end = ' -> ')
            current = current.next
        print("None")

    def print_backwards(self):
        current = self.head

        while(current.next):
            current = current.next
        while(current):
            print(current.data, end = ' --> ')
            current = current.prev

    def delete_specific_node (self, key):
        current = self.head
        while current:
            if current.data == key:
                if current.prev:
                    current.prev.next = current.next
                    return ("successfully deleted")
                else:
                    self.head = current.next
                if current.next:
                    current.next.prev = current.prev
                return None
            current = current.next


        print("key not found")

ll = DoublyLinkedList()

ll.addtofront(10)
ll.addtofront(20)
ll.addtofront(30)
ll.addtofront(40)

ll.addtofront(0)
ll.print_list()
ll.print_backwards()
ll.print_list()